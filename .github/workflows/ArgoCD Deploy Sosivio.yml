name: 'ArgoCD Deploy Sosivio'

on:
  workflow_dispatch:
      
env:
  EKS_REGION: "us-east-1"
  EKS_CLUSTER: "prodEKS"

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - uses: azure/setup-helm@v3
        id: install
        
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(<kubectl.sha256) kubectl" | sha256sum --check

          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          
          kubectl version --client

      - name: Check AWS version
        run: |
          aws --version
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $EKS_REGION
          aws sts get-caller-identity
          
      - name: Connect to EKS cluster 
        run: aws eks --region $EKS_REGION update-kubeconfig --name $EKS_CLUSTER

      # Helm install Sosivio Repo
      - name: Helm install Sosivio Repo
        run: helm repo add sosivio https://helm.sosiv.io
        
      # Helm install Sosivio
      - name: Helm install Sosivio
        run: helm install -n sosivio sosivio sosivio/sosivio --set platform=eks --create-namespace

      # Wait for the Dashboard service to be available
      - name: Wait for Sosivio Dashboard service availability
        run: |
          # Loop until the service is ready or for a maximum of 5 minutes (300 seconds)
          timeout=300
          start_time=$(date +%s)
          while true; do
            status=$(kubectl get svc -n sosivio dashboard-lb -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "$status" ]; then
              break
            fi
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))
            if [ "$elapsed_time" -ge "$timeout" ]; then
              echo "Service dashboard-lb did not become available within the timeout period."
              exit 1
            fi
            sleep 5
          done
        
      - name: Secrets
        run: kubectl get secrets/sosivio-admin-otp -n sosivio --template={{.data.password}} | base64 -d
